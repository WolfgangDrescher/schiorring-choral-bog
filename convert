#!/bin/bash

set -e

rm -rf kern
mkdir -p kern

args=("$@")

pad_num=${args[1]:-3}

pad_with_zeros() {
    if [[ ! "$1" =~ ^[0-9]+$ ]]; then
        echo "Error: Input is not a valid number."
        return 1
    fi
    num=$(echo "$1" | sed 's/^0*//')
    printf "%0${pad_num}d" "$num"
}

swap_lines() {
    local string=${1:-$(</dev/stdin)}
    # declare string=${*:-$(</dev/stdin)}
    if (( $(grep -c . <<<"$string") > 1 )); then
        local swapped_string=$(echo -e "$string" | awk 'NR==1{first=$0; next} NR==2{print $0 ORS first; next} {print}')
        echo -e "$swapped_string"
    else
        echo -e "$string"
    fi
}

mm_line="*MM180\t*\t*MM180\t*MM180\t*MM180\t*MM180\t*MM180\t*MM180\t*MM180"
mclef_line="*mclefF4\t*\t*mclefG2\t*mclefF4\t*mclefG2\t*mclefF4\t*mclefGv2\t*mclefG2\t*mclefG2"
fbabove_line="*\t*above\t*\t*\t*\t*\t*\t*\t*"

convert_file() {
    local file="$1"
        if [[ -f "$file" ]]; then
        filename=$(basename -- "$file")
        extension="${filename##*.}"
        filename="${filename%.*}"
        if [[ "$extension" == "mxl" ]]; then
            rm -rf tmp
            mkdir -p tmp
            # unzip -o "$file" -d tmp &> /dev/null
            ditto -V -x -k --sequesterRsrc --rsrc "$file" tmp &> /dev/null
            pattern="tmp/*.xml"
            xml_files=( $pattern )
            xml_file=${xml_files[0]}
        else
            xml_file="$file"
        fi
        unzip -o "$file" -d tmp &> /dev/null
        pattern="tmp/*.xml"
        kern_filename=$(php slugify.php "$(echo "$filename" | sed "s/Schiorring - //")")
        num=$(echo "$kern_filename" | grep -o '^[0-9]\+' | sed 's/^0*//')
        padded_num=$(pad_with_zeros "$num")
        kern_filename="${padded_num}$(echo "$kern_filename" | sed 's/^[0-9]*//')"
        kern_filename="$kern_filename.krn"
        echo "$kern_filename"
        musicxml2hum "$xml_file" | \
            extractxx -I "**recip" | \
            `#shed -x **fb -e "s/_//g" |` \
            extractxx -f 1,3,2,4,5,6,7,8,9 | \
            transpose -s 7 -t -P8 | \
            sed '/^!!!.*\t/ s/\t.*//' | \
            sed '/\*Trd0c0/d' | \
            cat <(echo -e -n "!!!ONM: $num\n") - | \
            swap_lines | \
            sed "s/^!!!OMV:/!!!OTL@@DA:/" | \
            sed "s/^!!!OTL:/!!!OPR@@DA:/" | \
            sed "s/^!!!OPR@@DA: Choral Bog/!!!OPR@@DA: Choral-Bog/" | \
            cat <(echo -e -n "!!!CDT: 1743-1798\n") - | \
            cat <(echo -e -n "!!!COM: Schiørring, Niels\n") - | \
            sed "s/!!!system-decoration:.*/!!!system-decoration: {(s1,s2,s3,s4)}{(s5,s6)}{(s7,s8)}/g" | \
            cat - <(echo -e -n "!!!RDF**kern: > = above\n") | \
            cat - <(echo -e -n "!!!RDF**kern: < = below\n") | \
            cat - <(echo -e -n "!!!AGN: chorale\n") | \
            cat - <(echo -e -n "!!!EED: Derek Remeš\n") | \
            cat - <(echo -e -n "!!!EED2: Victor Phan\n") | \
            cat - <(echo -e -n "!!!END: 2023/11/28\n") | \
            cat - <(echo -e -n "!!!ENC: Wolfgang Drescher\n") | \
            cat - <(echo -e -n "!!!EEV: $(date '+%Y/%m/%d')\n") | \
            cat - <(echo -e -n "!!!title: @{ONM}. @{OTL}\n") | \
            cat - <(echo -e -n "!!!verovio: mnumInterval 1\n") | \
            awk '/^\*met/ && !flag { print; print "'"$mm_line"'"; flag=1; next } 1' | \
            awk '/^\*clef/ && !flag { print; print "'"$mclef_line"'"; flag=1; next } 1' | \
            awk '/^\*MM180/ && !flag { print; print "'"$fbabove_line"'"; flag=1; next } 1' | \
            sed '/^!!!OTL/ s/'\''/’/' | \
            sed "s/yy@/yy/" | \
            grep -v '^*I' | \
            awk '!/^([\t*]+)$/' | \
            echo -ne "$(cat)" \
            > "kern/$kern_filename"
    fi
}

if [ -d "${args[0]}" ]; then
    for file in "${args[0]}"/*.{mxl,xml,musicxml}; do
        convert_file "$file"
    done
elif [ -f "${args[0]}" ]; then
    # If the path is a file, print its name
    convert_file "${args[0]}"
else
    echo "Invalid path. File or directory file does not exist."
fi

node ./create-table.mjs
node ./recalculate-measure-numbers.mjs

rm -rf tmp
